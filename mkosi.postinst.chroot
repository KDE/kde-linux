#!/bin/bash
# SPDX-License-Identifier: GPL-2.0-only OR GPL-3.0-only OR LicenseRef-KDE-Accepted-GPL
# SPDX-FileCopyrightText: 2023 Harald Sitter <sitter@kde.org>

set -ex

env

mkdir --mode 0700 /system # for the kdeos-overlay.service
mkdir /snap # for snapd (will get a subvolume mounted into that snapd then mounts the snaps into)

export SYSTEMD_ESP_PATH="$BOOT_MNT"
mkdir --mode 0700 "$SYSTEMD_ESP_PATH"
bootctl install
echo 'timeout 5' >> "$SYSTEMD_ESP_PATH/loader/loader.conf"
cp /usr/share/edk2-shell/x64/Shell.efi "$SYSTEMD_ESP_PATH/shellx64.efi"

# Make sure our definitions are well formed
mkdir -pv /efi/EFI/Linux
/usr/lib/systemd/systemd-sysupdate --verify=no list # verify=no because we only care if the configs are valid
rm -rfv /efi/

# Install build and runtime dependencies
packages=(
  git base-devel cmake yaml-cpp boost-libs boost dosfstools btrfs-progs glib2-devel
# NOTE: plasma-workspace depends on phonon (to build integration plugins **for** phonon) but doesn't actually
#   need a working backend so we build without vlc for now.
# For discover backend
  fwupd
# For kio-extras
  smbclient
# For selenium
  python-atspi
# For print-manager
  cups cups-browsed system-config-printer
# For kdenetwork-filesharing
  samba
# For spectacle
  opencv
# For fingerprint login
  fprintd
# For DDC/CI external monitors brightness; https://wiki.archlinux.org/title/backlight
  ddcutil
# For users KCM
  accountsservice
)
# Install in parallel to improve performance
pacman --sync --refresh --noconfirm "${packages[@]}"

# YAY Builder
# https://preciselab.io/how-to-install-yay-on-pure-archlinux-image/
pacman --sync --noconfirm go
mkdir -p /tmp/yay-build
useradd -m -G wheel builder && passwd -d builder
chown -R builder:builder /tmp/yay-build
echo 'builder ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers.d/builder
su - builder -c "git clone https://aur.archlinux.org/yay.git /tmp/yay-build/yay"
su - builder -c "cd /tmp/yay-build/yay && makepkg --noconfirm"
pacman --noconfirm --upgrade /tmp/yay-build/yay/*.pkg.tar.*
pacman --noconfirm --sync libinih libnsl liburcu lzo python apparmor autoconf-archive go-tools python-docutils squashfs-tools xfsprogs
# For build deps for systemd-bootchart
pacman --noconfirm --sync intltool docbook-xsl
su - builder -c "yay --noconfirm --sync --sudo /bin/true snapd steam-devices-git systemd-bootchart"
pacman --noconfirm --upgrade /home/builder/.cache/yay/snapd/*.pkg.tar.*
pacman --noconfirm --upgrade /home/builder/.cache/yay/steam-devices-git/*.pkg.tar.*
pacman --noconfirm --upgrade /home/builder/.cache/yay/systemd-bootchart/*.pkg.tar.*
touch /var/lib/snapd/apparmor/snap-confine/.keep # this has been gotten lost in the past for unknown reasons
ln -s /snap /var/lib/snapd/snap # try to reconcile different default locations for snap mounts by making the arch path a symlink to the canonical one
userdel --remove builder
rm /etc/sudoers.d/builder
rm -rf /home/builder

# KDE Builder
whoami
cd /opt
echo "$PWD"
env

KDE_BUILD_ROOT="$CHROOT_SRCDIR/kde-builder"

export HOME=$KDE_BUILD_ROOT
pacman --sync --noconfirm git dbus-python python-promise python-yaml python-setproctitle
git clone https://invent.kde.org/sdk/kde-builder.git
cd kde-builder
#
export PATH="$SRCDIR/strip:$PATH" # hijack ninja and strip executables
export PATH="$PWD":"$PATH"
export KDESRC_BUILD_IGNORE_MISSING_PROGRAMS=1
./kde-builder --install-distro-packages --prompt-answer yes
./kde-builder --generate-config --prompt-answer yes
cat <<- EOF > $KDE_BUILD_ROOT/.config/kde-builder.yaml
# This file controls options to apply when configuring/building projects, and controls which projects are built in the first place.
# List of all options: https://kde-builder.kde.org/en/kdesrc-buildrc/conf-options-table.html

config-version: 2
global:
  branch-group: kf6-qt6

  # Finds and includes *KDE*-based dependencies into the build. This makes
  # it easier to ensure that you have all the projects needed, but the
  # dependencies are not very fine-grained so this can result in quite a few
  # projects being installed that you didn't need.
  include-dependencies: true

  source-dir: $KDE_BUILD_ROOT/kde/src  # Directory for downloaded source code
  build-dir: $KDE_BUILD_ROOT/kde/build  # Directory to build KDE into before installing
  install-dir: /usr  # Directory to install KDE software into
  # qt-install-dir: ~/kde/qt  # Directory to install Qt if kde-builder supplies it

  cmake-options: >
    -DBUILD_TESTING=OFF -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_STRIP=$SRCDIR/strip/strip -DQT_FORCE_ASSERTS=1

  # kde-builder sets 2 options which is used in options like make-options or set-env
  # to help manage the number of compile jobs that happen during a build:
  #
  # 1. num-cores, which is just the number of detected CPU cores, and can be passed
  #    to tools like make (needed for parallel build) or ninja (completely optional).
  #
  # 2. num-cores-low-mem, which is set to the largest value that appears safe for
  #    particularly heavyweight projects based on total memory, intended for
  #    projects like qtwebengine.
  num-cores: "$(nproc)"
  num-cores-low-mem: "$(nproc)"

  # Makes the built-from-source Plasma session accessible from the SDDM login screen.
  install-login-session: false

  # Stop the build process on the first failure. If set to false, when kde-builder
  # encounters a build failure, it will attempt to continue building other projects,
  # using libraries from the system in cases where they would otherwise be provided
  # by a project that has failed to build.
  # Unless your system has very up-to-date packages, this is probably not what you want.
  stop-on-failure: true

  # Use a flat folder layout under ~/kde/src and ~/kde/build
  # rather than nested directories
  directory-layout: flat

  # Use Ninja as cmake generator
  cmake-generator: Ninja

  # Build with LSP support for everything that supports it
  compile-commands-linking: false
  compile-commands-export: false

  # Generate .idea config files in project directories
  # Enable this if you want to use CLion for development
  generate-clion-project-config: false

  # Generate .vscode config files in project directories
  # Enable this if you want to use Visual Studio Code for development
  generate-vscode-project-config: false

  # Generate copy-pastable files for manual qtcreator config creation
  # Enable this if you want to use Qt Creator for development
  generate-qtcreator-project-config: false

  # Ignore packagekit-qt module
  ignore-projects: [packagekit-qt, gpgme]

# With base options set, the remainder of the file is used to define projects to build, in the
# desired order, and set any project-specific options.

# This line includes build configs that are provided in build-configs dir in repo-metadata.
# https://invent.kde.org/sysadmin/repo-metadata/-/tree/master/build-configs
# KDE Builder automatically updates repo-metadata, so you are always using an up-to-date configs.
include \${build-configs-dir}/kde6.yaml: ""
EOF

# No packagekit support in discover please! We don't want discover talking about pacman things.
pacman --remove --noconfirm packagekit libpackagekit-glib || true

cat ~/.config/kde-builder.yaml
# We want word splitting here because KDE_BUILDER_TARGET contains multiple things
# shellcheck disable=SC2086
./kde-builder ${KDE_BUILDER_ARGS} ${KDE_BUILDER_TARGET}

# Calamares
cd /tmp
git clone --depth 1 https://github.com/calamares/calamares
cmake -S calamares -B calamares/build -DCMAKE_INSTALL_PREFIX=/usr -DBUILD_TESTING=OFF -DWITH_QT6=ON
cmake --build calamares/build "-j$(nproc)"
cmake --install calamares/build

cat <<- EOF > /usr/share/icons/default/index.theme
[Icon Theme]
Inherits=breeze_cursors
EOF

# WARNING: only set up os-release after the build otherwise kde-build doesn't know how to handle the system currently
cat <<- EOF > /usr/lib/os-release
NAME="KDE Linux"
PRETTY_NAME="KDE Linux"
ID=kdelinux
VERSION_ID=$CI_COMMIT_SHORT_SHA
BUILD_ID=$IMAGE_VERSION
ANSI_COLOR="38;2;61;174;233"
HOME_URL="https://linux.kde.org/"
DOCUMENTATION_URL="https://userbase.kde.org/KDELinux"
SUPPORT_URL="https://kde.org/support/"
BUG_REPORT_URL="https://bugs.kde.org/enter_bug.cgi?product=KDELinux"
PRIVACY_POLICY_URL="https://kde.org/privacypolicy-apps/"
LOGO=kde-symbolic
IMAGE_VERSION=$IMAGE_VERSION
KDEOS_COMMIT_SHA=$CI_COMMIT_SHA
KDEOS_COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA
KDEOS_CI_URL=$CI_PIPELINE_URL
EOF
[ -f /usr/lib/os-release ] || false
cat /usr/lib/os-release

# Generate the debug archive after the os-release so we can easily turn it into a systemd-sysext
cd /
_kdeos-make-debug-archive

mkdir flatpak
flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
# Do this separately, when used as part of remote-add it complains about GPG for unknown reasons
flatpak remote-modify --collection-id=org.flathub.Stable flathub

flatpak install --noninteractive --assumeyes org.mozilla.firefox
flatpak install --noninteractive --assumeyes org.kde.gwenview

mv /var/lib/flatpak / # we'll extract this and later mount it into place

# Enable samba usershare
cat <<- EOF >> /etc/samba/smb.conf
[global]
  usershare path = /var/lib/samba/usershares
  usershare max shares = 100
  usershare allow guests = yes
  usershare owner only = yes
EOF

plymouth-set-default-theme breeze-bgrt

cd /tmp
/usr/bin/_kdeos-rebuild-efi
mv -v ./*.efi /
