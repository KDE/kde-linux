#!/bin/sh
# SPDX-License-Identifier: GPL-2.0-only OR GPL-3.0-only OR LicenseRef-KDE-Accepted-GPL
# SPDX-FileCopyrightText: 2023 Harald Sitter <sitter@kde.org>

set -ex

env

mkdir --mode 0700 /system # for the kdeos-overlay.service
mkdir /snap # for snapd (will get a subvolume mounted into that snapd then mounts the snaps into)

export SYSTEMD_ESP_PATH="$BOOT_MNT"
mkdir --mode 0700 "$SYSTEMD_ESP_PATH"
bootctl install
echo 'timeout 5' >> "$SYSTEMD_ESP_PATH/loader/loader.conf"
cp /usr/share/edk2-shell/x64/Shell.efi "$SYSTEMD_ESP_PATH/shellx64.efi"

# Make sure our definitions are well formed
mkdir -pv /efi/EFI/Linux
/usr/lib/systemd/systemd-sysupdate --verify=no list # verify=no because we only care if the configs are valid
rm -rfv /efi/

# Generate all locales. Because /usr/lib is not writable in the target system we need to ship all locales pre-generated.
# Sucks. But oh well.
cat /usr/share/i18n/SUPPORTED > /etc/locale.gen
locale-gen

# Install build and runtime dependencies
pacman --sync --refresh
pacman --sync --noconfirm git base-devel cmake yaml-cpp boost-libs boost dosfstools btrfs-progs glib2-devel
# NOTE: plasma-workspace depends on phonon (to build integration plugins **for** phonon) but doesn't actually
#   need a working backend so we build without vlc for now.
# For discover backend
pacman --sync --noconfirm fwupd
# For kio-extras
pacman --sync --noconfirm smbclient
# For selenium
pacman --sync --noconfirm python-atspi
# For print-manager
pacman --sync --noconfirm cups cups-browsed system-config-printer
# For spectacle
pacman --sync --noconfirm opencv
# For fingerprint login
pacman --sync --noconfirm fprintd
# For DDC/CI external monitors brightness; https://wiki.archlinux.org/title/backlight
pacman --sync --noconfirm ddcutil
# For users KCM
pacman --sync --noconfirm accountsservice

# YAY Builder
# https://preciselab.io/how-to-install-yay-on-pure-archlinux-image/
pacman --sync --noconfirm go
mkdir -p /tmp/yay-build
useradd -m -G wheel builder && passwd -d builder
chown -R builder:builder /tmp/yay-build
echo 'builder ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers.d/builder
su - builder -c "git clone https://aur.archlinux.org/yay.git /tmp/yay-build/yay"
su - builder -c "cd /tmp/yay-build/yay && makepkg --noconfirm"
pacman --noconfirm --upgrade /tmp/yay-build/yay/*.pkg.tar.*
pacman --noconfirm --sync libinih libnsl liburcu lzo python apparmor autoconf-archive go-tools python-docutils squashfs-tools xfsprogs
# For build deps for systemd-bootchart
pacman --noconfirm --sync intltool docbook-xsl
su - builder -c "yay --noconfirm --sync --sudo /bin/true snapd steam-devices-git systemd-bootchart"
pacman --noconfirm --upgrade /home/builder/.cache/yay/snapd/*.pkg.tar.*
pacman --noconfirm --upgrade /home/builder/.cache/yay/steam-devices-git/*.pkg.tar.*
pacman --noconfirm --upgrade /home/builder/.cache/yay/systemd-bootchart/*.pkg.tar.*
touch /var/lib/snapd/apparmor/snap-confine/.keep # this has been gotten lost in the past for unknown reasons
ln -s /snap /var/lib/snapd/snap # try to reconcile different default locations for snap mounts by making the arch path a symlink to the canonical one
userdel --remove builder
rm /etc/sudoers.d/builder
rm -rf /home/builder

# KDE Builder
whoami
cd /opt
echo "$PWD"
env
export HOME=/tmp/kde-builder
pacman --sync --noconfirm git dbus-python python-promise python-yaml python-setproctitle
git clone https://invent.kde.org/sdk/kde-builder.git
cd kde-builder
#
export PATH="$PWD":"$PATH"
export KDESRC_BUILD_IGNORE_MISSING_PROGRAMS=1
./kde-builder --install-distro-packages --prompt-answer yes
./kde-builder --generate-config --prompt-answer yes
cat <<- EOF > /tmp/kde-builder/.config/kdesrc-buildrc
global
    branch-group kf6-qt6

    # Finds and includes *KDE*-based dependencies into the build.  This makes
    # it easier to ensure that you have all the modules needed, but the
    # dependencies are not very fine-grained so this can result in quite a few
    # modules being installed that you didn't need.
    include-dependencies true

    # Install directory for KDE software
    install-dir /usr

    # Directory for downloaded source code
    source-dir /tmp/kde-builder/kde/src

    # Directory to build KDE into before installing
    # relative to source-dir by default
    build-dir /tmp/kde-builder/kde/build

    # qt-install-dir ~/kde/qt # Where to install Qt6 if kde-builder supplies it

    cmake-options -DBUILD_TESTING=OFF -DCMAKE_BUILD_TYPE=RelWithDebInfo

    # kde-builder sets 2 options which is used in options like make-options or set-env
    # to help manage the number of compile jobs that happen during a build:
    #
    # 1. num-cores, which is just the number of detected CPU cores, and can be passed
    #    to tools like make (needed for parallel build) or ninja (completely optional).
    #
    # 2. num-cores-low-mem, which is set to largest value that appears safe for
    #    particularly heavyweight modules based on total memory, intended for
    #    modules like qtwebengine
    num-cores $(nproc)
    num-cores-low-mem $(nproc)

    # kde-builder can install a sample .xsession file for "Custom"
    # (or "XSession") logins,
    install-login-session false

    # Stop the build process on the first failure. If set to false, when kde-builder
    # encounters a build failure, it will attempt to continue building other modules,
    # using libraries from the system in cases where they would otherwise be provided
    # by a module that has failed to build.
    #
    # Unless your system has very up-to-date packages, this is probably not what you want.
    stop-on-failure true

    # Use a flat folder layout under ~/kde/src and ~/kde/build
    # rather than nested directories
    directory-layout flat

    # Use Ninja as cmake generator instead of gmake
    cmake-generator Ninja

    # Build with LSP support for everything that supports it
    compile-commands-linking false
    compile-commands-export false

    # Generate .vscode config files in project directories
    # Enable this if you want to use Visual Studio Code for development
    generate-vscode-project-config false

    ignore-modules packagekit-qt
end global

# With base options set, the remainder of the file is used to define modules to build, in the
# desired order, and set any module-specific options.

#  This line includes module definitions provided in repo-metadata. Do not comment it.
include \${module-definitions-dir}/kf6-qt6.ksb

# To change options for modules that have already been defined, use an
# 'options' block. See kf6-common-options.ksb for an example
EOF

# No packagekit support in discover please! We don't want discover talking about pacman things.
pacman --remove --noconfirm packagekit libpackagekit-glib || true

cat ~/.config/kdesrc-buildrc
# We want word splitting here because KDE_BUILDER_TARGET contains multiple things
# shellcheck disable=SC2086
./kde-builder ${KDE_BUILDER_TARGET} || (mv /tmp/kde-builder "$CHROOT_SRCDIR"; false)

# Calamares
cd /tmp
git clone --depth 1 https://github.com/calamares/calamares
cmake -S calamares -B calamares/build -DCMAKE_INSTALL_PREFIX=/usr -DBUILD_TESTING=OFF -DWITH_QT6=ON
cmake --build calamares/build "-j$(nproc)"
cmake --install calamares/build

cat <<- EOF > /usr/share/icons/default/index.theme
[Icon Theme]
Inherits=breeze_cursors
EOF

cd /
_kdeos-make-debug-archive

# WARNING: only set up os-release after the build otherwise kde-build doesn't know how to handle the system currently
cat <<- EOF > /usr/lib/os-release
NAME="KDE Linux"
PRETTY_NAME="KDE Linux"
ID=kdelinux
VERSION_ID=$CI_COMMIT_SHORT_SHA
BUILD_ID=$IMAGE_VERSION
ANSI_COLOR="38;2;61;174;233"
HOME_URL="https://linux.kde.org/"
DOCUMENTATION_URL="https://userbase.kde.org/KDELinux"
SUPPORT_URL="https://kde.org/support/"
BUG_REPORT_URL="https://bugs.kde.org/enter_bug.cgi?product=KDELinux"
PRIVACY_POLICY_URL="https://kde.org/privacypolicy-apps/"
LOGO=kde-symbolic
IMAGE_VERSION=$IMAGE_VERSION
KDEOS_COMMIT_SHA=$CI_COMMIT_SHA
KDEOS_COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA
KDEOS_CI_URL=$CI_PIPELINE_URL
EOF
[ -f /usr/lib/os-release ] || false
cat /usr/lib/os-release

plymouth-set-default-theme breeze-bgrt

cd /tmp
/usr/bin/_kdeos-rebuild-efi
mv -v ./*.efi /
