#!/bin/sh
# SPDX-License-Identifier: GPL-2.0-only OR GPL-3.0-only OR LicenseRef-KDE-Accepted-GPL
# SPDX-FileCopyrightText: 2023 Harald Sitter <sitter@kde.org>

# NOTE: this runs outside the chroot!
# Mangle subvol setup from calamares to systemd conforming lineup.

set -ex

ROOT=$1
[ "$ROOT" = "" ] && exit 1

device=$(findmnt --noheadings --nofsroot --output SOURCE "$ROOT")
[ "$device" = "" ] && exit 1

. /etc/os-release

tmpdir=$(mktemp --directory)

# Calamares likes to mount stuff even with an empty config. Throw it away again.
cd "$ROOT"
umount -R ./*
rm -rfv ./*
btrfs subvolume sync . || true
umount -R --lazy "$ROOT" # unmount is important as otherwise we still hold a subvolume open and it can never sync deletion

mount -o ro /dev/gpt-auto-root /system
mount -o rw "$device" "$tmpdir"
cd "$tmpdir"
rm -rfv ./*
btrfs subvolume sync . || true

btrfs quota enable --simple .
if grep "kde-linux.erofs=1" /proc/cmdline; then
    btrfs subvolume create @system
    mkdir @system/boot @system/proc @system/sys @system/dev @system/run @system/usr
    cp /dev/gpt-auto-root kde-linux_$IMAGE_VERSION.erofs

    # Overmount calamares' mount with the subvol mount
    mount -o "subvol=@system" "$device" "$ROOT"
    mount -t proc proc "$ROOT/proc"
    mount -t sysfs sys "$ROOT/sys"
    mount -o bind /dev "$ROOT/dev"
    mount -t tmpfs tmpfs "$ROOT/run"
    mkdir "$ROOT/run/udev" # This is not part of @system but rather the $ROOT (do not move this to the mkdir list of @system!)
    mount -o bind /run/udev "$ROOT/run/udev"
    mount -t efivarfs efivarfs "$ROOT/sys/firmware/efi/efivars"
    mount -o ro,X-mount.subdir=usr /dev/gpt-auto-root "$ROOT/usr"
else
    btrfs subvolume create @kde-linux_$IMAGE_VERSION
    cp -ra /system/. @kde-linux_$IMAGE_VERSION
    btrfs subvolume create @home
    btrfs subvolume create @root
    btrfs subvolume create @locale
    btrfs subvolume create @snap
    btrfs subvolume create @var-overlay
    btrfs subvolume create @etc-overlay
    mkdir @var-overlay/upper @var-overlay/work @etc-overlay/upper @etc-overlay/work

    # Overmount calamares' mount with the subvol mount
    mount -o "subvol=@kde-linux_$IMAGE_VERSION" "$device" "$ROOT"
    mount -t proc proc "$ROOT/proc"
    mount -t sysfs sys "$ROOT/sys"
    mount -o bind /dev "$ROOT/dev"
    mount -t tmpfs tmpfs "$ROOT/run"
    mkdir "$ROOT/run/udev" # This is not part of @system but rather the $ROOT (do not move this to the mkdir list of @system!)
    mount -o bind /run/udev "$ROOT/run/udev"
    mount -t efivarfs efivarfs "$ROOT/sys/firmware/efi/efivars"
    _kde-linux-overlay "$device" "$ROOT"
fi

# ESP is a bit tricky. Find the block device of the root partition and then we'll ask systemd for an ESP on that device.
# ... and luks devices are even more tricky because we need to get the real device first
realdevice=$(realpath --relative-to /dev "$device")
if [ -r "/sys/block/$realdevice/dm/" ]; then
    for slave in /sys/block/"$realdevice"/slaves/*; do
        realdevice=$(basename "$slave")
        break
    done
fi
blockdev=/dev/$(basename "$(readlink --canonicalize "/sys/class/block/$realdevice/..")")
espdev=$(_kde-linux-find-esp "$blockdev")
mount "$espdev" "$ROOT/boot"

# Bit of a crutch to get systemd's base_filesystem_create() to run so the / gets populated with symlinks.
# Exit code is not indicative of to the function having run - ignore it.
systemd-nspawn -D "$ROOT" "true" || true

# Initialize systemd stuff
systemd-sysusers --root="$ROOT"
# exclude /usr because some tmpfiles are rubbish and assume /usr is writable...
systemd-tmpfiles --root="$ROOT" --exclude-prefix=/usr --create

# Make sure presets are applied
systemctl --root="$ROOT" preset-all
systemctl --root="$ROOT" preset-all --global

if grep "kde-linux.erofs=1" /proc/cmdline; then
    # Enable the erofs feature. This file will eventually need removing by a service file or something when erofs is full default.
    cat <<- EOF >> $ROOT/etc/sysupdate.d/erofs.feature.d/enable.conf
# Auto generated by KDE Linux installer. Enables EROFS feature.
[Feature]
Enabled=true
EOF
fi
